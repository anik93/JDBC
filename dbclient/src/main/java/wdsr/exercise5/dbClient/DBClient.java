package wdsr.exercise5.dbClient;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import wdsr.exercise5.Main;

public class DBClient {
	private static final Logger log = LoggerFactory.getLogger(Main.class);
	
	private Connection connection = null;
	private PreparedStatement preparedStatement = null;
	private Statement statement = null;
	
	private static final String URL = "jdbc:hsqldb:mem:test-db";
	private static final String User = "SA";
	
	public DBClient(){
		try {
			connection = DriverManager.getConnection(URL, User, "");
			log.info("Connected");
		} catch (SQLException e) {
			log.error("Error Message ", e);
		}
	}
	
	public void createTabels(){
		try {
			preparedStatement = connection.prepareStatement("CREATE TABLE Student ("
															+ "pkey INT NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1),"
															+ "name VARCHAR(255) NOT NULL,"
															+ "sex VARCHAR(6) NOT NULL,"
															+ "age INT NULL,"
															+ "level INT NULL,"
															+ "PRIMARY KEY (pkey));");
			log.info("Table created {}",preparedStatement.executeUpdate());
			
			preparedStatement = connection.prepareStatement("CREATE TABLE Faculty ("
															+ "pkey INT NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 100, INCREMENT BY 1),"
															+ "name VARCHAR(255) NOT NULL,"
															+ "PRIMARY KEY (pkey));");
			log.info("Table created {}",preparedStatement.executeUpdate());

			preparedStatement = connection.prepareStatement("CREATE TABLE Class ("
															+ "pkey INT NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 1000, INCREMENT BY 1),"
															+ "name VARCHAR(255) NOT NULL,"
															+ "fkey_faculty INT,"
															+ "PRIMARY KEY (pkey),"
															+ "FOREIGN KEY (fkey_faculty) REFERENCES Faculty(pkey));");
			log.info("Table created {}",preparedStatement.executeUpdate());

			preparedStatement = connection.prepareStatement("CREATE TABLE Enrollment ("
															+ "fkey_student INT,"
															+ "fkey_class INT,"
															+ "FOREIGN KEY (fkey_student) REFERENCES Student(pkey),"
															+ "FOREIGN KEY (fkey_class) REFERENCES Class(pkey));");
			log.info("Table created {}",preparedStatement.executeUpdate());

		} catch (SQLException e) {
			log.error("Error Message ", e);
		}
	}
	
	public void insertValues(){
		try {
			preparedStatement = connection.prepareStatement("INSERT INTO Student (name, sex, age, level) VALUES (?,?,?,?)");
			
			preparedStatement.setString(1, "John Smith");
			preparedStatement.setString(2, "male");
			preparedStatement.setInt(3, 23);
			preparedStatement.setInt(4, 2);
			log.info("ADD student id {}", preparedStatement.executeUpdate());
		
			preparedStatement.setString(1, "Rebecca Milson");
			preparedStatement.setString(2, "female");
			preparedStatement.setInt(3, 27);
			preparedStatement.setInt(4, 3);
			log.info("ADD student id {}", preparedStatement.executeUpdate());
		
			preparedStatement.setString(1, "George Heartbreaker");
			preparedStatement.setString(2, "male");
			preparedStatement.setInt(3, 19);
			preparedStatement.setInt(4, 1);
			log.info("ADD student id {}", preparedStatement.executeUpdate());
		
			preparedStatement.setString(1, "Deepika Chopra");
			preparedStatement.setString(2, "female");
			preparedStatement.setInt(3, 25);
			preparedStatement.setInt(4, 3);
			log.info("ADD student id {}", preparedStatement.executeUpdate());
		
			preparedStatement = connection.prepareStatement("INSERT INTO Faculty (name) VALUES (?)");
			preparedStatement.setString(1, "Engineering");
			log.info("ADD faculty id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setString(1, "Philosophy");
			log.info("ADD faculty id {}", preparedStatement.executeUpdate());

			preparedStatement.setString(1, "Law and administration");
			log.info("ADD faculty id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setString(1, "Languages");
			log.info("ADD faculty id {}", preparedStatement.executeUpdate());
			
			preparedStatement = connection.prepareStatement("INSERT INTO Class (name, fkey_faculty) VALUES (?,?)");
			preparedStatement.setString(1, "Introduction to labour law");
			preparedStatement.setInt(2, 102);
			log.info("ADD class id {}", preparedStatement.executeUpdate());

			preparedStatement.setString(1, "Graph algorithms");
			preparedStatement.setInt(2, 100);
			log.info("ADD class id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setString(1, "Existentialism in 20th century");
			preparedStatement.setInt(2, 101);
			log.info("ADD class id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setString(1, "English grammar");
			preparedStatement.setInt(2, 103);
			log.info("ADD class id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setString(1, "From Plato to Kant");
			preparedStatement.setInt(2, 101);
			log.info("ADD class id {}", preparedStatement.executeUpdate());
			
			preparedStatement = connection.prepareStatement("INSERT INTO Enrollment (fkey_student, fkey_class) VALUES (?,?)");
			preparedStatement.setInt(1, 1);
			preparedStatement.setInt(2, 1000);
			log.info("ADD enrollment id {}", preparedStatement.executeUpdate());
		
			preparedStatement.setInt(1, 1);
			preparedStatement.setInt(2, 1002);
			log.info("ADD enrollment id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setInt(1, 1);
			preparedStatement.setInt(2, 1003);
			log.info("ADD enrollment id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setInt(1, 1);
			preparedStatement.setInt(2, 1004);
			log.info("ADD enrollment id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setInt(1, 2);
			preparedStatement.setInt(2, 1002);
			log.info("ADD enrollment id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setInt(1, 2);
			preparedStatement.setInt(2, 1003);
			log.info("ADD enrollment id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setInt(1, 4);
			preparedStatement.setInt(2, 1000);
			log.info("ADD enrollment id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setInt(1, 4);
			preparedStatement.setInt(2, 1002);
			log.info("ADD enrollment id {}", preparedStatement.executeUpdate());
			
			preparedStatement.setInt(1, 4);
			preparedStatement.setInt(2, 1003);
			log.info("ADD enrollment id {}", preparedStatement.executeUpdate());
		} catch (SQLException e) {
			log.error("Error Message ", e);
		}
	}
	
	public void select1(){
		try {
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery("SELECT s.pkey, s.name "
														+ "FRoM Student s join Enrollment e on s.pkey=e.fkey_student"
														+ "where e.fkey_student is null");
			while(resultSet.next()){
				log.info(resultSet.getInt("pkey")+ " " + resultSet.getString("name").split(" ")[1]);
			}
		} catch (SQLException e) {
			log.error("Error Message ", e);
		}
	}
	
	public void select2(){
		try {
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery("");
			while(resultSet.next()){
				log.info(resultSet.getInt("pkey")+ " " + resultSet.getString("name").split(" ")[1]);
			}
		} catch (SQLException e) {
			log.error("Error Message ", e);
		}
	}
	//dobrze
	public void select3(){
		try {
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery("SELECT s.pkey, s.name "
														+ "FROM Student s JOIN Enrollment e ON s.pkey=e.fkey_student "
														+ "JOIN Class c ON e.fkey_class=c.pkey "
														+ "WHERE sex='female' AND c.name='Existentialism in 20th century'");
			while(resultSet.next()){
				log.info(resultSet.getInt("pkey")+ " " + resultSet.getString("name").split(" ")[1]);
			}
		} catch (SQLException e) {
			log.error("Error Message ", e);
		}
	}
	
	public void select4(){
		try {
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery("select f.name "
														+ "from faculty f join class c on f.pkey=c.fkey_faculty "
														+ "join enrollment e on c.pkey=e.fkey_class "
														+ "group by f.name");
			while(resultSet.next()){
				log.info(resultSet.getString("name"));
			}
		} catch (SQLException e) {
			log.error("Error Message ", e);
		}
	}
	//dobrze
	public void select5(){
		try {
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery("Select name, age "
														+ "FROM student "
														+ "where age=( select max(s1.age) "
																		+ "FROM student s1 JOIN Enrollment e ON s1.pkey=e.fkey_student "
																	    + "JOIN Class c ON e.fkey_class=c.pkey "
																	    + "WHERE c.name='Introduction to labour law')");
			while(resultSet.next()){
				log.info(resultSet.getString("name")+" "+resultSet.getInt("age"));
			}
		} catch (SQLException e) {
			log.error("Error Message ", e);
		}
	}
	//juz prawie
	public void select6(){
		try {
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery("SELECT c.name, count(e.fkey_student) counter "
														+ "FROM Student s join Enrollment e on s.pkey=e.fkey_student "
														+ "join Class c on e.fkey_class=c.pkey "
														+ "group by c.name ");
			while(resultSet.next()){
				log.info(resultSet.getString("name")+" "+resultSet.getString("counter"));
			}
		} catch (SQLException e) {
			log.error("Error Message ", e);
		}
	}
	//dobrze
	public void select7(){
		try {
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery("SELECT level, avg(age) srednia "
														+ "FROM Student "
														+ "GROUP BY level");
			while(resultSet.next()){
				log.info(resultSet.getString("level")+ " " + resultSet.getInt("srednia"));
			}
		} catch (SQLException e) {
			log.error("Error Message ", e);
		}
	}
	
	public void closeConnection(){
		try{
			if(connection!=null)
				connection.close();
		}catch(SQLException e){
			log.error("Error Message ", e);
		}
	}
}
